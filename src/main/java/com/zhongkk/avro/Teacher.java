/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.zhongkk.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Teacher extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Teacher\",\"namespace\":\"com.zhongkk.avro\",\"fields\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"age\",\"type\":[\"int\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.Integer age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Teacher() {}

  /**
   * All-args constructor.
   */
  public Teacher(java.lang.CharSequence username, java.lang.Integer age) {
    this.username = username;
    this.age = age;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return username;
    case 1: return age;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: username = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /** Creates a new Teacher RecordBuilder */
  public static com.zhongkk.avro.Teacher.Builder newBuilder() {
    return new com.zhongkk.avro.Teacher.Builder();
  }
  
  /** Creates a new Teacher RecordBuilder by copying an existing Builder */
  public static com.zhongkk.avro.Teacher.Builder newBuilder(com.zhongkk.avro.Teacher.Builder other) {
    return new com.zhongkk.avro.Teacher.Builder(other);
  }
  
  /** Creates a new Teacher RecordBuilder by copying an existing Teacher instance */
  public static com.zhongkk.avro.Teacher.Builder newBuilder(com.zhongkk.avro.Teacher other) {
    return new com.zhongkk.avro.Teacher.Builder(other);
  }
  
  /**
   * RecordBuilder for Teacher instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Teacher>
    implements org.apache.avro.data.RecordBuilder<Teacher> {

    private java.lang.CharSequence username;
    private java.lang.Integer age;

    /** Creates a new Builder */
    private Builder() {
      super(com.zhongkk.avro.Teacher.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.zhongkk.avro.Teacher.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Teacher instance */
    private Builder(com.zhongkk.avro.Teacher other) {
            super(com.zhongkk.avro.Teacher.SCHEMA$);
      if (isValidValue(fields()[0], other.username)) {
        this.username = data().deepCopy(fields()[0].schema(), other.username);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'username' field */
    public java.lang.CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public com.zhongkk.avro.Teacher.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.username = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'username' field */
    public com.zhongkk.avro.Teacher.Builder clearUsername() {
      username = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public com.zhongkk.avro.Teacher.Builder setAge(java.lang.Integer value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'age' field */
    public com.zhongkk.avro.Teacher.Builder clearAge() {
      age = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Teacher build() {
      try {
        Teacher record = new Teacher();
        record.username = fieldSetFlags()[0] ? this.username : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
